<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PicGo上传图片</title>
      <link href="/2020/05/31/PicGo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
      <url>/2020/05/31/PicGo%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="超简单的利用-GitHub-PicGo搭建属于自己的图床"><a href="#超简单的利用-GitHub-PicGo搭建属于自己的图床" class="headerlink" title="超简单的利用 GitHub + PicGo搭建属于自己的图床"></a>超简单的利用 GitHub + PicGo搭建属于自己的图床</h1><h5 id="1-软件下载地址"><a href="#1-软件下载地址" class="headerlink" title="1.软件下载地址"></a>1.软件下载地址</h5><h5 id="2-GitHub"><a href="#2-GitHub" class="headerlink" title="2.GitHub"></a>2.GitHub</h5><p>​          2.1 创建图库<br>​           2.2 获取令牌</p><h5 id="3-本地配置步骤"><a href="#3-本地配置步骤" class="headerlink" title="3.本地配置步骤"></a>3.本地配置步骤</h5><p>​        3.1 安装配置PicGo<br>​        3.2 测试PicGo</p><h1 id="利用-GitHub-PicGo搭建属于自己的图床"><a href="#利用-GitHub-PicGo搭建属于自己的图床" class="headerlink" title="利用 GitHub + PicGo搭建属于自己的图床"></a>利用 GitHub + PicGo搭建属于自己的图床</h1><h3 id="1-软件下载地址-1"><a href="#1-软件下载地址-1" class="headerlink" title="1.软件下载地址"></a>1.软件下载地址</h3><p>PicGo 蓝奏云下载地址：<a href="https://www.lanzous.com/ia49ojg" target="_blank" rel="noopener">PicGo</a></p><p>Typora 官网：<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></p><h3 id="2-GitHub-1"><a href="#2-GitHub-1" class="headerlink" title="2.GitHub"></a>2.GitHub</h3><h4 id="2-1-创建图库"><a href="#2-1-创建图库" class="headerlink" title="2.1 创建图库"></a>2.1 创建图库</h4><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200531235634.jpg" alt="1"></p><h4 id="2-2-获取令牌"><a href="#2-2-获取令牌" class="headerlink" title="2.2 获取令牌"></a>2.2 获取令牌</h4><p>大致步骤如下：</p><p>点击自己的 GitHub 头像</p><p>Settings</p><p>Developer settings</p><p>Personal access tokens</p><p>Generate new token</p><p>之后会有这个界面，自己填选，Note注明给谁用，全部勾选<br><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200531235626.jpg" alt="2"></p><p>生成token</p><p>此时可以保存备用，也可以在下边用到的时候，再按照上述步骤生成 token 。注意 token 是私密的，需要做好安全保护！</p><h3 id="3-本地配置步骤-1"><a href="#3-本地配置步骤-1" class="headerlink" title="3.本地配置步骤"></a>3.本地配置步骤</h3><h4 id="3-1-安装配置PicGo"><a href="#3-1-安装配置PicGo" class="headerlink" title="3.1 安装配置PicGo"></a>3.1 安装配置PicGo</h4><p>接下来配置 GitHub 作为图床，在左侧找到图床设置，找到GitHub图床。<br>1、前边有星号的为必填项，依次填入之前创建的仓库名，注意是：账户名/仓库名；<br>2、然后填入设定的分支名（创建仓库时如果没有创建其他分支，默认就是 master 分支）；<br>3、最后填入之前生成的 token 令牌，点击确定</p><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200531235756.jpg" alt="3"></p><p>4、然后找到 PicGo 设置，打开里边的 <strong><em>时间戳重命名</em></strong>，这样可以避免图床在上传文件时，由于文件名相同造成的错误。</p><p>5、然后剩下的配置项可以不用管，参考的文章不建议设置为开机自启，因为等会配置好 typora 后，typora 在上传图片时会自动打开 PicGo 软件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo再加速</title>
      <link href="/2020/05/30/Hexo%E5%86%8D%E5%8A%A0%E9%80%9F/"/>
      <url>/2020/05/30/Hexo%E5%86%8D%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>通过Github的Github Page作为博客服务器，然后在腾讯云上购买域名，最后将两者绑定。</p><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><p>1、注册github账号，假设账号名为XXXX。新建一个仓库，命名为XXXX.github.io（只有当命名为此种格式时，Github才会将其设置为Github Page）;<br>2、 在仓库中添加两个文件CNAME（必须大写且无后缀，CNAME文件是用于设置域名的文件）和index.html（网页主文件）。</p><p>CNAME文件中只需要一行即可。假设域名为xxxx.cn<br>3、在腾讯云上申请域名，选择合适的域名购买后（不同的后缀价格差别较大，如果没有特殊需求，选择最合适的即可，此处申请xxxx.cn）<br>4、实名认证，现在在国内购买的域名都需要实名认证，否则将无法使用。实名认证需要上传身份证照片等等信息。<br>5、配置DNS，确认DNS是解析正常的状态。（一定要保证解释状态是正常解析，否则需要重新设置DNS（等待时间很长，官方说0-72小</p><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200601002457.png" alt="1"></p><p>6、 添加解析，分别添加两条解析，其格式如下（此处我们统一使用CNAME配置解析，有些博客也推荐A配置（记录值是IP，但是github.io的IP可能会改变，所有不推荐），不是很推荐）</p><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200601002522.png" alt="2"></p><p>7、设置解析任务后，大概需要等待十分钟就可以正常访问了。</p><p>注意：<br>问题一：是否需要备案？<br>如果仅仅是Github网页做后台，是不用备案的。备案的网站主要是指在中国大陆开展网站服务的网站，由于我们使用的是国外的服务器，所以暂时是不需要备案的。但是依旧要注意网页的使用，避免非法信息的传播。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo上传至Github</title>
      <link href="/2020/05/23/Hexo%E4%B8%8A%E4%BC%A0%E8%87%B3Github/"/>
      <url>/2020/05/23/Hexo%E4%B8%8A%E4%BC%A0%E8%87%B3Github/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>我们要将自己的博客上传至Github,首先我们需要将去注册我们GIithub账户。</p><ol><li><a href="https://github.com/" target="_blank" rel="noopener">注册Github</a>：右上角的<code>sign in</code>是登录，<code>sign up</code>是注册。</li><li><strong>新建仓库(Repository)</strong>:点击<code>create repository</code>按钮。</li><li>查看仓库配置：点击仓库右上角的<code>Settings</code>选项。</li><li>获取本机当前用户的SSH公钥：首先查看在本机的当前用户(操作系统的登录账户)目录下是否已经存在ssh公钥。<code>~</code>表示当前用户的家目录。</li></ol><p><strong>SSH公钥是是将Hexo关键所在，<a href="https://www.bilibili.com/video/BV1cW411A7Jx?p=4" target="_blank" rel="noopener">Github SSH公钥具体配置方法</a></strong></p><h1 id="绑定Hexo和Github"><a href="#绑定Hexo和Github" class="headerlink" title="绑定Hexo和Github"></a>绑定Hexo和Github</h1><p><strong>1.修改本地站点配置文件</strong>: 打开站点目录（<code>blog\</code>）下的<code>_config.yml</code>文件，将最后一部分修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">          type:  git</span><br><span class="line">          repo:  git@github.com:username&#x2F;username.github.io.git</span><br><span class="line">          branch:  master</span><br></pre></td></tr></table></figure><p><strong>2.安装关联hexo和git的工具</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure><p>如果最后可以看到这个工具的版本号，则表明安装成功。</p><h1 id="Hexo升天"><a href="#Hexo升天" class="headerlink" title="Hexo升天"></a>Hexo升天</h1><p><strong>部署Hexo</strong>：执行以下命令:hexo d</p><p>这个命令会将本地博客根目录（<code>blog\</code>）下<code>public</code>文件夹里的所有文件上传至Github上的<code>username/username.github.io.git</code>这个仓库。</p><p><strong>2.博客预览</strong>：在浏览器中输入<code>https://username.github.io</code>,如果看到新页面则大功告成.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题与Gitalk</title>
      <link href="/2020/05/23/Hexo%E4%B8%BB%E9%A2%98%E4%B8%8EGitalk/"/>
      <url>/2020/05/23/Hexo%E4%B8%BB%E9%A2%98%E4%B8%8EGitalk/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo主题配置"><a href="#Hexo主题配置" class="headerlink" title="Hexo主题配置"></a>Hexo主题配置</h1><p>一、我们现在的博客是初始化的主题，所以我们要给Hexo换上新装。Hexo主题在官网有很多，大家可以登录查看<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网链接</a>。</p><p>有自己中意的主题以后，前往作者的Github,点击：“clone or download”，把文件夹下载到自己所创建的博客“<strong>themes</strong>”文件中。</p><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200524115430.jpg" alt="6"></p><p>二、进入自己所创建的博客文件夹中，找到“_config.yml“文件，在这里我推荐大家<strong>“Typora”</strong>软件打开这个文件，以及后期的博文，我都推荐大家使用<strong>“Tpyora”</strong>。</p><p>利用查找功能找到：Themes的主题配置。将主题Themes改成：自己所下载的主题名称。</p><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200524115452.jpg" alt="7"></p><h1 id="Gitalk开启评论功能"><a href="#Gitalk开启评论功能" class="headerlink" title="Gitalk开启评论功能"></a>Gitalk开启评论功能</h1><p>一、新建仓库</p><p>点击<strong><em>你的用户名\</em></strong>，定位到github用户主页，新建一个仓库</p><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200524114317.png" alt="1"></p><p>点击<strong><em>New\</em></strong>之后，你应该看到</p><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200524114431.png" alt="4"></p><p>二、注册应用</p><p>Gitalk评论插件的授权机制依赖于<code>OAuth Application</code>，故使用Gitalk之前注册新应用。<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">注册链接</a></p><ul><li>点击<strong><em>注册链接\</em></strong>之后，你应该看到</li></ul><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200524114330.png" alt="2"></p><p>点击<strong><em>Register application\</em></strong>之后，你应该看到</p><p><img src="https://raw.githubusercontent.com/SCX-MI/tu-BED/master/20200524114346.png" alt="3"></p><p>请复制、保留<code>Client ID</code>和<code>Client Secret</code>的值（相应字段下方的字符串。<del>此处Teach-ple应用我已删除</del>）</p><p>三、主题配置</p><p>现在，请打开主题目录下的<code>_config.yml</code>文件，配置Gitalk评论插件的参数</p><p>四、本地测试</p><p>hexo g<br>hexo s</p><p><code>hexo s</code>本地测试以检查参数是否设置错误，<code>hexo d</code>部署以正常使用。（第一次使用，请登陆初始化）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo本地搭建</title>
      <link href="/2020/05/19/Hexo%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/05/19/Hexo%E6%9C%AC%E5%9C%B0%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>本博主第一篇文章，主要介绍：为何使用hexo。如何进行hexo本地的搭建以及遇到的问题，解决方案。</p><h1 id="为何使用Hexo"><a href="#为何使用Hexo" class="headerlink" title="为何使用Hexo"></a>为何使用Hexo</h1><p>目前网络有形形色色的博客，我们在这些平台的注册博客，发表文章，如果后来平台消失，我们发表的宝贵文章，也随之消失。</p><p>我也将会在hexo 中记录自己学习心得，作为自己的“北大荒”。</p><h1 id="Hexo本地搭建"><a href="#Hexo本地搭建" class="headerlink" title="Hexo本地搭建"></a>Hexo本地搭建</h1><h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h2><p>事物的运行都需要一个环境，所以要想让hexo运行就需要为其搭建一个环境。</p><p>Node.js,和Git是hexo环境搭建的主要的软件。</p><p>一、安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>去官网选择最新的版本，安装完成后在CMD指令窗口输入指令：”<strong><em>node -v</em></strong>“。</p><p> 等待电脑给出 Node 的版本号，如若给出则安装成功。</p><p>二、安装Git</p><p> 安装  <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>,完成后在CMD窗口输入“<strong>Git</strong>”指令。</p><p>如若出现上图，则表示Git安装成功。</p><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>环境搭建完成后，我们就要进行Hexo的安装。</p><p>在CMD窗口输入“<strong>npm install hexo-cli -g</strong>”。进行安装。</p><p>安装完成后如果可以看到hexo-cli的版本号，则表示安装成功。</p><p>上图可以看到Hexo的版本号，代表已经安装成功。</p><h2 id="本地博客的创建"><a href="#本地博客的创建" class="headerlink" title="本地博客的创建"></a>本地博客的创建</h2><p>所有准备工作完成后，我们就要进行本地博客的创建。</p><p>一、首先在CMD指令窗口输入：<strong>md blog</strong>  ，这个指令是创建一个名为”blog”的文件夹。建议将此文件夹创建在其余盘中。</p><p>二、初始化博客：分别在CMD中依次输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>若实验结果出现“Start blogging with Hexo!”字符串，则表示初始化成功且可以开始写博客了。<strong>注意：在初始化Hexo博客之前，必须保证根目录为空,否则无法成功初始化。</strong></p><p>如若出现上图则表示博客创建成功。</p><p>三、本地博客预览</p><p>在CMD窗口输入指令：”<strong>hexo s</strong>“</p><p>若结果发现有”Hexo is running at <code>http://localhost:4000/</code>字符串，则表示启动成功，Hexo当前就运行在上述网址。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/04/hello-world/"/>
      <url>/2020/03/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
